<?xml version="1.0" encoding="utf-8"?>
<?xyl-use href="../../../View/Shared/Definition/Code.xyl"?>
<?xyl-overlay href="../../../View/Shared/Overlay/Code.xyl"?>

<overlay xmlns="http://hoa-project.net/xyl/xylophone">
<yield id="main_content">

  <h1>Contributor guide</h1>

  <p>Abstract</p>

  <h2 id="Table_of_contents">Table of contents</h2>

  <tableofcontents id="main-toc" />

  <h2 id="Introduction" for="main-toc">Introduction</h2>

  <p>Hoa is a big project. This project cannot live without the help of a
  <strong>precious</strong> community. This community is constitued of casual
  developers, regular developers, sometimes even people that are not developers
  but programming lovers, people used to use PHP, sometimes not…</p>
  <p>Every experience, every idea, every thing that can make Hoa better for
  thousands of users world-wide is <strong>inestimable</strong>. However,
  contributing to a project is not an easy task. There is some prerequisites,
  some useful information to be aware of, like:</p>
  <ul>
    <li>The organization,</li>
    <li>Who are the people to talk to, and,</li>
    <li>In a more simpler way, what to do exactly?</li>
  </ul>
  <p>We hope this contributor guide will answer to these questions.</p>

  <h2 id="Prerequisites" for="main-toc">Prerequisites</h2>

  <p>Before contributing to Hoa, we need to clarify some requirements in terms
  of tools, skills etc. in order to make your journey as much pleasant as
  possible.</p>

  <h3 id="Tools" for="main-toc">Tools</h3>

  <p>To contribute to Hoa, the following tools are required:</p>
  <ul>
    <li><a href="http://php.net/">PHP</a>,</li>
    <li><a href="http://git-scm.com/">Git</a>,</li>
    <li><a href="http://getcomposer.org/">Composer</a>,</li>
    <li><a href="http://curl.haxx.se/">cURL</a>.</li>
  </ul>
  <p>That's all. Every other tools are going to be automatically installed when
  needed.</p>

  <h3 id="Skills" for="main-toc">Skills</h3>

  <p>This important point needs to be clarified quickly. There is absolutely
  <strong>no</strong> minimum skill level required to contribute to Hoa.
  If you have an idea but you don't know how to develop it: Never mind, just
  open a discussion and we will be very glad to help you understand how to do
  it! If you have a higher knowledge than us on a specific domain (which is
  likely to happen often), we will be very glad to learn from you! The community
  of Hoa is rich because it is consituted of very different people. We cannot
  wait for your first contribution!</p>

  <h3 id="Getting_help" for="main-toc">Getting help</h3>

  <p>At anytime, you will find at least one person to <strong>help</strong> you.
  Hoa, as a set of libraries, is a vast project and not all
  <strong>hoackers</strong> are present all the time, but we are pretty sure you
  will meet someone that can help or redirect you to someone else. An hoacker is
  a long-term contributor that have deep or wide knowledge of the project.</p>
  <p>Two ways to get help:</p>
  <ul>
    <li><a href="@community#IRC">on IRC</a>, for a <strong>realtime</strong> and
    <strong>synchronous</strong>
    help,</li>
    <li><a href="@community#Mailing-lists">on mailing-lists</a>, for an
    <strong>asynchronous</strong> help with more people.</li>
  </ul>

  <h2 id="What_to_do" for="main-toc">What to do?</h2>

  <p>Hoa has more than 50 libraries, in addition to other sub-projects. Each
  library lives in a specific repository. This is hard to have an
  <strong>overview</strong> of the current work:</p>
  <ul>
    <li>What should be done?</li>
    <li>What is ready to be done?</li>
    <li>What is in progress? or</li>
    <li>What is under review?</li>
  </ul>
  <p>They are all <strong>legitimate</strong> questions when starting with a
  project (even when you are a long-term contributor sometimes!).</p>

  <h3 id="Boards_for_an_overview" for="main-toc">Boards for an overview</h3>

  <p>Each library has an <a href="@literature#Hack_book">hack book chapter</a>.
  Each chapter provides useful links to its top, such as:</p>
  <ul>
    <li>
      <img src="hoa://Application/Public/Image/Icon/Waffle.svg" alt="Git" height="25px" />
      To its <strong>board</strong>,
    </li>
    <li>
      <img src="hoa://Application/Public/Image/Icon/Git.svg" alt="Git" height="25px" />
      To its <strong>Git repository</strong>,
    </li>
    <li>
      <img src="hoa://Application/Public/Image/Icon/Github.svg" alt="Github" height="25px" />
      To its <strong>Github mirror</strong>.
    </li>
  </ul>
  <p>The <strong>board</strong> is the place where all the works appear in
  columns representing the progression:</p>
  <ol>
    <li><strong>Backlog</strong>, things under discussion,</li>
    <li><strong>Ready</strong>, things that are ready to be done,</li>
    <li><strong>In progess</strong>, things that are being done by some
    contributors,</li>
    <li><strong>Done</strong>, things that have been recently done.</li>
  </ol>
  <p>Also, you may know that the <code>Central</code> is a (read-only)
  repository that gathers all Hoa's libraries in one place. So, as expected,
  <a href="@board:repository=Central">the board of the <code>Central</code></a>
  provides the <strong>highest overview</strong> of all the current works of
  all Hoa's libraries.</p>

  <h3 id="What_difficulty" for="main-toc">What difficulty?</h3>

  <p>In order to ease the contribution process, we are trying to attach several
  labels to each work (like <code>bug</code> or <code>enhancement</code>). Some
  of them provide an information about the difficulty:</p>
  <ul>
    <li><code>casual</code>, can be done by a new contributor or can be done
    quickly,</li>
    <li><code>medium</code>, requires some skills to address this work,</li>
    <li><code>hard</code>. requires strong skills in the code and the domain it
    addresses.</li>
  </ul>
  <p>Fortunately, boards provide a search engine easing to sort the works based
  on your profile; thus:</p>
  <ul>
    <li><a href="https://waffle.io/hoaproject/central?search=difficulty%3A%20casual">all
    the <code>casual</code> works</a>,</li>
    <li><a href="https://waffle.io/hoaproject/central?search=difficulty%3A%20medium">all
    the <code>medium</code> works</a>,</li>
    <li><a href="https://waffle.io/hoaproject/central?search=difficulty%3A%20hard">all
    the <code>hard</code> works</a>.</li>
  </ul>
  <p>Now we know what to do, let's contribute!</p>

  <h2 id="Set_up_the_environment" for="main-toc">Set up the environment</h2>

  <p>In this section we will see how to set up the repository (the code) and the
  dependencies (mostly to run the tests).</p>

  <h3 id="Repository" for="main-toc">Repository</h3>

  <p>Hoa hosts its own <a href="http://git.hoa-project.net/">Git
  repositories</a>. The rules are the following:</p>
  <ul>
    <li>Everyone can <strong>read</strong> through <strong>HTTP</strong>:</li>
    <pre><code class="language-shell">$ git clone http://git.hoa-project.net/Library/Websocket.git</code></pre>
    <li>Commiters can <strong>read and write</strong> through <strong>SSH</strong>:</li>
    <pre><code class="language-shell">$ git clone git@git.hoa-project.net:Library/Websocket.git</code></pre>
  </ul>
  <p>As mentionned on <a href="@source#Version_manager_(Git)">the source
  page</a>, most of the repositories are mirrored on
  <a href="https://github.com/hoaproject">Github</a>. We use Github as a
  <strong>bug tracker</strong>, where all issues and contributions happen. Also,
  several tools are linked to Github such as the boards or Composer (detailed
  hereinafter).  Mirrors are one-way and a bot is responsible to synchronize
  everything, no worry.</p>
  <p>So we suggest you to start by cloning a library from Github, let's say
  <a href="@github:repository=Websocket">the <code>Hoa\Websocket</code>
  library</a>:</p>
  <pre><code class="language-shell">$ mkdir Hoa
$ cd Hoa
$ git clone https://github.com/hoaproject/Websocket.git
$ cd Websocket</code></pre>
  <p>If <a href="https://help.github.com/articles/generating-ssh-keys/">Github
  knows your public SSH key</a>, then we suggest:</p>
  <pre><code class="language-shell">$ git clone git@github.com:hoaproject/Websocket.git</code></pre>
  <p>Immediatly, to avoid incoming potential conflicts, we suggest to create a new branch:</p>
  <pre><code class="language-shell">$ git checkout -b incoming</code></pre>
  <p>Creating an <code>incoming</code> branch keeps the <code>master</code>
  branch <strong>safe</strong>. The <code>master</code> is really important for
  Hoa, because it uses the <a href="@source#Rush_Release">Rush Release</a> as a
  release system.  It implies the <code>master</code> branch always contains the
  latest patches. Thus, to update the <code>master</code> branch, you just need
  to run:</p>
  <pre><code class="language-shell">$ git pull origin master:master</code></pre>
  <p>Because your branch reference is <code>incoming</code> and not
  <code>master</code>, this is easier to maintain your repository
  up-to-date. We will detail this shortly.</p>
  <p>Of course you will not work directly on Hoa's repository because: First, it
  is a mirror, second, you do not have the permissions and third, it is a bad
  practise. You need to <a
  href="https://help.github.com/articles/fork-a-repo/">fork the repository</a>.
  A fork is a raw copy of the repository, allowing to do whatever you want
  without any restrictions. To fork a repository, let's say
  <a href="@github:repository=Websocket"><code>Hoa\Websocket</code></a>, you can
  use <a href="https://github.com/hoaproject/Websocket/fork">the Github
  interface</a> or run the following command (assuming the variable
  <code>$me</code> represents your Github username):</p>
  <pre><code class="language-shell">$ me=&amp;lt;your Github username>
$ curl -X POST https://api.github.com/repos/hoaproject/Websocket/forks --user $me</code></pre>
  <p>Now you have your own fork, we must tell the repository this is another
  remote. A remote is another location for a repository. Thus:</p>
  <pre><code class="language-shell">$ git remote add me git@github.com:$me/Websocket.git</code></pre>
  <p>At this point, we should see 2 remotes, like in the following
  example:</p>
  <pre><code class="language-shell">$ git remote --verbose
me  git@github.com:$me/Websocket.git (fetch)
me  git@github.com:$me/Websocket.git (push)
origin  git@github.com:hoaproject/Websocket.git (fetch)
origin  git@github.com:hoaproject/Websocket.git (push)</code></pre>
  <p>Bonus: If you would like to see all the pull requests locally, i.e. all the
  contributions in progress (can be useful to help or test someone else's
  contribution), we will create a new remote, called <code>github-pr</code>. It
  will point to the same URL than <code>origin</code> in this particular case
  but we create another remote to clarify the workflow. Thus:</p>
  <pre><code class="language-shell">$ git remote add github-pr git@github.com:hoaproject/Websocket.git
$ git config remote.github-pr.fetch '+refs/pull/*/head:refs/remotes/origin/pr/*'
$ git remote --verbose
github-pr   git@github.com:hoaproject/Websocket.git (fetch)
github-pr   git@github.com:hoaproject/Websocket.git (push)
me  git@github.com:$me/Websocket.git (fetch)
me  git@github.com:$me/Websocket.git (push)
origin  git@github.com:hoaproject/Websocket.git (fetch)
origin  git@github.com:hoaproject/Websocket.git (push)</code></pre>
  <p>So to sum up, we have 3 remotes, i.e. 3 different sources for the same
  code:</p>
  <ol>
    <li><code>origin</code>, Hoa's repository (Github mirror),</li>
    <li><code>me</code>, your fork,</li>
    <li><code>github-pr</code>, all pull requests on Hoa's repository.</li>
  </ol>
  <p>Finally, to get all the data from all the remotes:</p>
  <pre><code class="language-shell">$ git fetch --all</code></pre>

  <h3 id="Dependencies" for="main-toc">Dependencies</h3>

  <p>The repository you cloned is likely to contain
  <strong>dependencies</strong>. To manage and install them, we rely on
  <a href="http://getcomposer.org/">Composer</a>. Thus, to install them:</p>
  <pre><code class="language-shell">$ composer install</code></pre>
  <p>And to update them:</p>
  <pre><code class="language-shell">$ composer update</code></pre>
  <p>A <code>vendor/</code> directory has been created at the root of the
  repository, along with a <code>composer.lock</code> file. Inside the
  <code>vendor/hoa/</code> directory you will find all Hoa's dependencies. And
  the <code>vendor/bin/hoa</code> file is a command to execute some programs
  provided by Hoa. We will use them shortly.</p>

  <h3 id="New_branch" for="main-toc">New branch</h3>

  <p>In addition to the <code>incoming</code> branch, it will be more
  comfortable and less error-prone to create one branch per contribution. There
  is no convention about the branch naming but we recommend everything in
  lowercase and <code>-</code>, <code>_</code> or <code>/</code> instead of
  spaces. Before creating a new branch, it is recommended to start with an
  up-to-date <code>master</code> and <code>incoming</code> branches:</p>
  <pre><code class="language-shell">$ git pull origin master:master
$ git checkout incoming
$ git merge master</code></pre>
  <p>Now you are ready to create your new branch, let's say
  <code>awesome-feature</code>:</p>
  <pre><code class="language-shell">$ git checkout -b awesome-feature
$ git branch
* awesome-feature
  incoming
  master</code></pre>
  <p>You are now ready to start writing code.</p>
  <p>Files that are likely to be modified are at the root of the repository. Edit
  them, save them, execute them, you are free to do whather you want. Assume
  that all files are UTF-8 encoded. This is important. If you need softwares to
  edit code, we can help you (see section bellow).</p>
  <p>In <a href="@source#Structure_of_a_library">the source page</a>, we learn
  what is the structure of a library. You must read it.</p>

  <h2 id="Validating_a_patch" for="main-toc">Validating a patch</h2>

  <p>While you are coding, before commiting your patches, you need to validate
  them. Our advice is to repeat this operation very often. The more you validate
  your code, the easier it will be to detect and understand errors or
  faults.</p>

  <h3 id="Preparing_a_patch" for="main-toc">Preparing a patch</h3>

  <p>Before all: Coding styles. Hoa adopts
  <a href="http://php-fig.org/psr/psr-1/">PSR-1</a> and
  <a href="http://php-fig.org/psr/psr-2/">PSR-2</a> standards regarding
  coding styles, in addition to some other internal standards. In order to
  check and automatically fix the majority of them, you would need to run
  the following command preferably at the root of the repository:</p>
  <pre><code class="language-shell">$ vendor/bin/hoa devtools:cs --dry-run --diff .</code></pre>
  <p>This command will check and print whether the majority of the coding styles
  are respected. If you want to automatically fix them, just remove the
  <code>--dry-run</code> option, thus:</p>
  <pre><code class="language-shell">$ vendor/bin/hoa devtools:cs --diff .</code></pre>
  <p>The command <code>hoa devtools:cs</code> requires the
  <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer">PHP-CS-Fixer</a> tool
  to be installed somewhere. Since this is a tool you are likely to use accross
  several projects, our advice is to install it globally:</p>
  <pre><code class="language-shell">$ composer global require fabpot/php-cs-fixer</code></pre>
  <p>Be ensured that <code>~/.composer/vendor/bin</code> is present in your
  <code>$PATH</code>.</p>

  <h3 id="Testing_a_patch" for="main-toc">Testing a patch</h3>

  <p>Once your code pretty, you can run tests to ensure there is no regression
  first; assuming you are still at the root of the repository:</p>
  <pre><code class="language-shell">$ vendor/bin/hoa test:run --directories Test</code></pre>
  <p>Excellent! To write new tests, to complete existing ones or to learn more
  about their execution, please refer to <a href="@hack:chapter=Test">the
  documentation of the <code>Hoa\Test</code> library</a>. We do not require
  contributors to use a specific development methodology, like test-driven
  development for instance. You are free to do whatever you want.</p>

  <h2 id="Commiting_a_patch" for="main-toc">Commiting a patch</h2>

  <p>Commit as much as possible. Abuse of commits. It is not bad to have too
  much commits but it is unfortunate to not have enough of them. One commit is
  atomic, it includes one specific modification. At least, the code must be able
  to run between any commits.</p>
  <p>A commit title must be 50 characters long. The commit body must contain
  <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> (even
  <a href="https://help.github.com/articles/github-flavored-markdown/">Github
  flavored Markdown</a> is accepted). A commit message tells a story. Feel free
  to add links and other references into the commit body. It <strong>must
  answer</strong> to the following questions:</p>
  <ol>
    <li><strong>What was</strong> the issue?</li>
    <li><strong>How to address</strong> this issue?</li>
    <li><strong>How did we address</strong> the issue?</li>
  </ol>
  <p>These questions reflect the way we do everything in Hoa (in particular the
  documentation). We do not provide a <q>“cool”</q> and <q>“blazing fast
  API”</q> just to make the <q>“buzz”</q>. We identify a problem, we think about
  it, we think about several ways to address it, and finally we propose a way to
  address it by scrupulously keeping the backward compatibility (BC) and
  preventing future potential BC breaks.  Sometimes it can be a long process but
  this is really important.</p>
  <p>To precisely choose what is going to be included inside a commit, we
  recommend to always use the following workflow:</p>
  <pre><code class="language-shell">$ git add --patch &amp;lt;file>
$ git add --patch &amp;lt;another file>
…
$ git commit</code></pre>
  <p>Note that <code>git commit</code> has no argument because the patch has
  been constructed with <code>git add</code>.</p>
  <p>We highly recommend to use your <code>$EDITOR</code> to edit the commit
  message: It is not possible to fulfill our recommendations in CLI.</p>
  <p>Do not edit the <code>CHANGELOG.md</code> file. It is automatically
  generated.</p>

  <h2 id="Publishing_a_patch" for="main-toc">Publishing a patch</h2>

  <p>commit, commit, commit, rebase only at the end if needed</p>
  <p>PR</p>
  <p>reviewer</p>
  <p>commiter</p>

  <h2 id="Contributor_pack" for="main-toc">Contributor pack</h2>

  <ul>
    <li>mail</li>
    <li>PHPStorm license</li>
    <li>IRC cloak</li>
    <li>goodies</li>
    <li>invites and special offers to some events</li>
  </ul>

  <h2 id="Conclusion" for="main-toc">Conclusion</h2>

</yield>
</overlay>
