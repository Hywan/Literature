<?xml version="1.0" encoding="utf-8"?>
<?xyl-use href="../Definitions.xyl"?>

<definition xmlns="http://hoa-project.net/xyl/xylophone">
<yield name="chapter">

  <draft />

  <h1 id="Form">Manuel d'apprentissage<title_break />Formulaire</h1>

  <ul class="prev_next">
    <li><a href="@ll:chapter=Xyl"><previous_chapter /> XYL</a></li>
    <li><a href="@ll:chapter=Fragment_async">Fragment et asynchrone
    <next_chapter /></a></li>
  </ul>

  <p>Les formulaires sont un des rares point d'<strong>interaction</strong>
  entre l'utilisateur et notre application. Dans ce chapitre, nous allons
  découvrir les mécanismes que propose XYL pour faciliter la manipulation des
  <strong>formulaires</strong>.</p>

  <h2 id="Table_des_matieres">Table des matières</h2>

  <tableofcontents id="main-toc" />

  <h2 id="Introduction" for="main-toc">Introduction</h2>

  <p>Les formulaires sont un moyen donné à l'utilisateur pour entrer des
  <strong>données</strong>. Mais attention, il est bien connu que tout ce qui
  provient de l'utilisateur est potentiellement <strong>dangereux</strong> ou
  <strong>faux</strong>, il est donc nécessaire de <strong>valider</strong>
  toutes ces données. Par ailleurs, si nous lui demandons des données, c'est
  probablement pour les manipuler par la suite, ce qui doit pouvoir se faire
  facilement.</p>
  <p>Nous avons appris que les composants standards de XYL suivent le
  vocabulaire du langage HTML. Les formulaires n'échappent pas à la règle même
  s'ils comportent des petits plus.</p>

  <h2 id="Ecrire_et_envoyer_un_formulaire" for="main-toc">Écrire et envoyer un
  formulaire</h2>

  <p>Nous allons écrire un formulaire dans un fichier <code>Form.xyl</code> et
  utiliser les composants <code>form</code> et <code>input</code> :</p>
  <pre><code class="language-markup">&amp;lt;?xml version="1.0" encoding="utf-8"?>

&amp;lt;document xmlns="http://hoa-project.net/xyl/xylophone">
  &amp;lt;title>Form&amp;lt;/title>

  &amp;lt;form action="#" method="post" id="myForm">
    &amp;lt;p>Foo: &amp;lt;input type="text" name="foo" />&amp;lt;/p>
    &amp;lt;p>Bar: &amp;lt;input type="text" name="bar" />&amp;lt;/p>
    &amp;lt;p>&amp;lt;input type="submit" />&amp;lt;/p>
  &amp;lt;/form>

  &amp;lt;ul>
    &amp;lt;li bind="?result" />
  &amp;lt;/ul>
&amp;lt;/document></code></pre>
  <p>Pour <strong>envoyer</strong> un formulaire, il nous faut savoir vers
  quelle <strong>ressource</strong> seront transmises les données et avec quelle
  <strong>méthode</strong> HTTP. Ces informations sont présentes respectivement
  dans l'attribut <code>action</code> et <code>method</code>. Quand l'attribut
  <code>action</code> vaut <code>#</code>, cela signifie que les données seront
  envoyées sur l'URI courant. Aucune différence avec les
  <a href="http://w3.org/TR/html5/forms.html">formulaires en HTML</a> !</p>

  <h2 id="Recuperation_des_donnees" for="main-toc">Récupération des données</h2>

  <p>Nous allons maintenant écrire l'interpréteur XYL pour ce document. Dans un
  premier temps, affichons simplement le formulaire, puis nous verrons comment
  récupérer les données par la suite. Ainsi, dans un fichier
  <code>index.php</code> :</p>
  <pre><code class="language-php">$xyl = new Hoa\Xyl(
    new Hoa\File\Read('Form.xyl'),
    new Hoa\Http\Response(),
    new Hoa\Xyl\Interpreter\Html()
);
$xyl->render();</code></pre>
  <p>Avec ceci, le formulaire s'affichera. Nous connaissons déjà très bien cette
  opération. Maintenant, nous savons que quand le formulaire sera envoyé, ce
  sera ce même code qui va s'exécuter. Nous voulons que notre composant
  <code>ul</code> contiennent les données. Pour cela, nous allons procéder en
  trois étapes :</p>
  <ul>
    <li>récupérer notre formulaire ;</li>
    <li>vérifier s'il est valide ;</li>
    <li>liéer les données avec notre liste.</li>
  </ul>
  <p>Précédemment, nous avons vu la méthode <code>Hoa\Xyl::render</code> sans
  préciser réellement ce qu'elle faisait. Sans rentrer dans le détail, nous
  pouvons dire qu'elle travaille en deux étapes :</p>
  <ol>
    <li>interprétation : assemblage du document principal ;</li>
    <li>rendu : liage des données et rendu.</li>
  </ol>
  <p>La méthode <code>Hoa\Xyl::render</code> est suffisamment intelligente pour
  savoir si l'interprétation a déjà été faite ou pas, et si ce n'est pas le cas,
  le faire automatiquement.</p>
  <p>Être capable de récupérer un formulaire pour le manipuler nécessite
  <strong>préalablement</strong> d'interpréter le document, grâce à la méthode
  <code>Hoa\Xyl::interprete</code>. Puis, pour récupérer notre formulaire, nous
  allons utiliser la méthode <code>Hoa\Xyl::getElement</code> qui prend en
  argument l'identifiant d'un élément. Ensuite, une fois que nous l'aurons, nous
  pourrons appeler les méthodes
  <code>Hoa\Xyl\Interpreter\Html\Form::hasBeenSent</code> et
  <code>Hoa\Xyl\Interpreter\Html\Form::isValid</code>, respectivement pour
  savoir si le formulaire a été envoyé et s'il est valide. Attention, les
  données ne seront pas <strong>disponibles</strong> tant qu'elles n'auront pas
  été validées. Enfin, si toutes ces contraintes sont respectées, alors nous
  récupérerons les données avec la méthode
  <code>Hoa\Xyl\Interpreter\Html\Form::getData</code> ; ainsi :</p>
  <pre data-line="6-12"><code class="language-php">$xyl = new Hoa\Xyl(
    new Hoa\File\Read('Form.xyl'),
    new Hoa\Http\Response(),
    new Hoa\Xyl\Interpreter\Html()
);
$xyl->interprete();
$data = $xyl->getData();
$form = $xyl->getElement('myForm');

if(   true === $form->hasBeenSent()
   &amp;amp;&amp;amp; true === $form->isValid())
    $data->result = array_values($form->getData());

$xyl->render();</code></pre>
  <p>Nous pouvons tester que notre formulaire fonctionne bien : il s'affiche et
  la liste est vide, nous pouvons le remplir, le soumettre et les données
  apparaissent dans la liste. Nous remarquons que les données sont
  <strong>persistantes</strong> dans le formulaire, c'est à dire qu'elles sont
  automatiquement replacées dans les champs correspondants (et ce n'est pas
  réservé au composant <code>input</code>, mais aussi à <code>select</code>,
  <code>textarea</code> etc.).</p>

  <h2 id="Contraintes_et_erreurs" for="main-toc">Contraintes et erreurs</h2>

  <p>Maintenant, parlons de <strong>validité</strong> d'un formulaire. Le
  premier niveau de validité est celui introduit par HTML. Par exemple,
  l'extrait suivant exprime la contrainte « la taille du texte est comprise
  entre 0 et 42 » :</p>
  <pre><code class="language-markup">&amp;lt;input type="text" maxlength="42" /></code></pre>
  <p>L'exemple suivant exprime « mon nombre est compris entre 7 et 42 » :</p>
  <pre><code class="language-markup">&amp;lt;input type="range" min="7" max="42" /></code></pre>
  <p>L'exemple suivant exprime « ma donnée est une adresse email » :</p>
  <pre><code class="language-markup">&amp;lt;input type="email" /></code></pre>
  <p>Et ainsi de suite. HTML propose une expressivité déjà
  <strong>importante</strong>. Côté <strong>client</strong>, ce sont les
  navigateurs qui sont chargés de ces validations pour fournir un retour
  <strong>immédiat</strong> à l'utilisateur. Côté <strong>serveur</strong>,
  c'est XYL qui se charge de ces validations (car les données ne proviennent pas
  toujours d'un navigateur, rappelez-vous qu'il ne faut jamais faire confiance à
  l'utilisateur).</p>
  <p>Très souvent, nous souhaitons associer des messages
  d'<strong>erreurs</strong> à une validation. C'est le rôle de l'attribut
  <code>error</code> présents sur les composants <code>input</code> et
  <code>textarea</code>, ainsi que <code>form</code> lui-même. Cet attribut
  contient une liste d'identifiants séparés par des espaces (comme pour
  l'attribut <code>class</code>). Ces identifiants réfèrent des composants
  <code>error</code>. Ces composants, par défaut, ne sont pas peints, sauf si
  une erreur survient et qu'elle change sa visibilité.  Ils peuvent contenir
  absolument <strong>n'importe quoi</strong> et peuvent être placés
  <strong>n'importe où</strong>. Par exemple :</p>
  <pre><code class="language-markup">&amp;lt;input type="email" error="myError" />
…
&amp;lt;error id="myError">
  &amp;lt;p>I am an error!&amp;lt;/p>
&amp;lt;error></code></pre>
  <p>L'erreur <code>myError</code> ne sera jamais affichée sauf si la donné
  contenu dans le composant <code>input</code> de type <code>email</code> est
  invalide. Pour le composant <code>form</code>, si une donnée est invalide,
  alors les erreurs indiquées dans son attribut <code>error</code> seront
  levées.</p>
  <p>Notons qu'un composant <code>error</code> peut contenir d'autres composants
  <code>error</code>.</p>

  <h3 id="Desactiver_les_validations" for="main-toc">Désactiver les
  validations</h3>

  <p>Sur le composant <code>form</code>, nous pouvons utiliser l'attribut
  <code>novalidate</code> qui permet de <strong>désactiver</strong> la
  validation. XYL propose plusieurs valeurs selon la localisation et le
  <strong>niveau</strong> de la validation :</p>
  <ul>
    <li><code>client</code>, désactive uniquement la validation client ;</li>
    <li><code>security</code>, désactive des critères de sécurité ;</li>
    <li><code>all</code> ou <code>true</code>, désactive tout.</li>
  </ul>
  <p>Ainsi, si nous voulons désactiver les validations du client (par exemple,
  le navigateur), nous allons faire :</p>
  <pre><code class="language-markup">&amp;lt;form novalidate="client">
  …
&amp;lt;/form></code></pre>
  <p>Le niveau de sécurité comporte plusieurs critères :</p>
  <ul>
    <li>la méthode HTTP utilisée pour envoyer les données est bien celle
    spécifiée par le formulaire ;</li>
    <li>l'encodage des données est bien celui spécifié par le formulaire ;</li>
    <li>les données ne sont pas vides (c'est à dire que le paquet HTTP est
    complet) ;</li>
    <li>etc.</li>
  </ul>
  <p>Si votre formulaire est modifié côté client, ces critères de sécurité
  peuvent être corrompus et il est alors nécessaire de les désactiver.</p>

  <h3 id="Validations_plus_fines" for="main-toc">Validations plus fines</h3>

  <p>Hoa propose le langage Praspel, déjà rapidement évoqué. Nous pouvons
  l'utiliser pour valider plus <strong>finement</strong> nos données côté
  <strong>serveur</strong> uniquement. En complément à l'attribut
  <code>error</code>, il existe l'attribut <code>validate</code>, également
  présent sur tous les éléments de formulaires pouvant être soumis. Par exemple,
  pour exprimer la contrainte « un nombre entre 7 et 42 ou 153 et 256 » :</p>
  <pre><code class="language-markup">&amp;lt;input type="text" validate="boundinteger(7, 42) or boundinteger(153, 256)" error="myError" /></code></pre>
  <p>Nous avons donc deux niveaux de validations : validation HTML et validation
  plus fine avec Praspel. Ces deux niveaux sont évaluées comme une
  <strong>conjonction</strong>, c'est à dire avec <em>et</em> logique :
  validation HTML <em>et</em> validation plus fine avec Praspel. Toutefois, ce
  <em>et</em> logique ne fait pas d'évaluation <strong>paraisseuse</strong>,
  c'est à dire que même si la première évaluation échoue, la validation suivante
  sera évaluée (et pourra lever les erreurs associées). Ainsi, nous pouvons
  écrire :</p>
  <pre><code class="language-markup">&amp;lt;input type="text" required="true" validate="boundinteger(7, 42)" /></code></pre>
  <p>Avec cet exemple, nous avons deux niveaux de validations :</p>
  <ol>
    <li>HTML, avec <code>required</code> (non vide) ;</li>
    <li>plus fine, avec <code>validate</code> (entier entre 7 et 42).</li>
  </ol>
  <p>Si la donnée est vide, nous allons quand même vérifier que c'est un entier
  compris entre 7 et 42, ce qui peut lever de nouvelles erreurs.</p>
  <p>Il est conseillé de voir l'attribut <code>validate</code> comme offrant un
  <strong>raffinement</strong> du type de la donnée.</p>
  <p>Mais ce n'est pas tout. L'attribut <code>validate</code> peut être
  <em>personnalisé</em> : <code>validate-<em>suffix</em></code>, tout comme
  l'attribut <code>error</code>. Cela permet d'<strong>associer</strong> des
  erreurs à une validation si leur <code><em>suffix</em></code> correspond. Par
  exemple :</p>
  <pre><code class="language-markup">&amp;lt;input type="text" validate-abc="…" error-abc="…" validate-def="…" error-def="…" /></code></pre>
  <p>Si la validation spécifiée par l'attribut <code>validate-abc</code> échoue,
  alors les erreurs spécifiées par l'attribut <code>error-abc</code> seront
  levées. Si aucune erreur n'est associée, il ne se passera rien. Encore une
  fois, toutes ces validations sont évaluées comme une conjonction.</p>

  <h3 id="Lever_ses_propres_erreurs" for="main-toc">Lever ses propres
  erreurs</h3>

  <p>Les validations précédemment vues ne concernent qu'une seule donnée à la
  fois mais pourtant il peut exister des <strong>dépendances</strong> entre
  toutes ses données. Ce niveau de validation appartient théoriquement au
  <a href="@ll:chapter=Model">modèle</a>. Des erreurs peuvent en remonter et
  elles doivent pouvoir s'afficher sur la vue (le plus souvent, à travers un
  contrôleur). Nous allons voir comment lever nos propres erreurs
  manuellement.</p>
  <p>Pour cela, il nous faut récupérer nos erreurs à partir de leurs
  identifiants, puis changer leur visibilité. C'est le rôle de la méthode
  <code>Hoa\Xyl\Interpreter\Error::raise</code> qui est un alias pour une
  question de sémantique. Ainsi, si nous voulons lever l'erreur <code>e1</code>,
  nous ferons :</p>
  <pre><code class="language-php">$xyl->getElement('e1')->raise();</code></pre>
  <p>Ainsi, peu importe où nous faisons nos validations, l'affiche des erreurs
  reste identique.</p>

  <h2 id="Application_Gordon-s_blog" for="main-toc">Application :
  <em lang="en">Gordon's blog</em></h2>

  <ul class="prev_next">
    <li><a href="@ll:chapter=Xyl"><previous_chapter /> XYL</a></li>
    <li><a href="@ll:chapter=Fragment_async">Fragment et asynchrone
    <next_chapter /></a></li>
  </ul>

</yield>
</definition>
