<?xml version="1.0" encoding="utf-8"?>
<?xyl-use href="../Definitions.xyl"?>
<?xyl-use href="../../../View/Shared/Definition/Code.xyl"?>
<?xyl-overlay href="../../../View/Shared/Overlay/Code.xyl"?>

<definition xmlns="http://hoa-project.net/xyl/xylophone">
<yield name="chapter">

  <h1 id="Embryo">Manuel d'apprentissage<title_break />Squelette d'application</h1>

  <ul class="prev_next">
    <li><a href="@learn:chapter=Core"><previous_chapter /> Exploration du
        noyau</a></li>
    <li><a href="@learn:chapter=Routerdispatcher">Router + Dispatcher = ♥
        <next_chapter /></a></li>
  </ul>

  <p>Dans cette section nous expliquons comment <strong>créer une
  application</strong> basée sur Hoa, en ré-utilisant tous les outils et
  automatismes à notre disposition.</p>

  <h2 id="Table_des_matieres">Table des matières</h2>

  <tableofcontents id="main-toc" />

  <h2 id="Aspect_framework_un_proof-of-concept" for="main-toc">Aspect
  framework, un <em>proof-of-concept</em></h2>

  <p>Hoa se définit avant tout comme un ensemble de bibliothèques. Toutefois,
  pour <strong>engager</strong> le développement avec Hoa, il est nécessaire
  de proposer des mécanismes dignes d'un framework afin de faciliter son
  <strong>apprentissage</strong>, son <strong>utilisation</strong> et ses
  <strong>contributions</strong>. C'est pourquoi Hoa propose un aspect
  framework qui doit être vu comme une <strong>démonstration de
  faisabilité</strong>, ou un <em>proof-of-concept</em>.</p>
  <p>Nous noterons que l'aspect framework est évidemment tourné vers un usage
  <strong>intensif</strong> des bibliothèques : nous ne proposerons pas
  d'« outils <strong>boîte-noires</strong> » sur lesquelles l'utilisateur n'a
  <strong>aucun contrôle</strong>. La philosophie de Hoa est tournée vers les
  bibliothèques, <ie /> vers le fait que l'utilisateur sait et comprend
  parfaitement ce qu'il fait. Ces bibliothèques fonctionnent bien ensemble, ce
  qui entraîne une modularité qui peut s'apparenter à des comportements
  rencontrés dans des frameworks, mais nous saurons toujours ce que nous
  faisons. Le fait que nous puissons créer nos propres bibliothèques et
  composants facilite la <strong>réutilisation</strong> et le
  <strong>partage</strong> de son travail, qui sont des aspects importants des
  frameworks.</p>
  <p>Enfin, Hoa met particulièrement l'accent sur
  l'<strong lang="en">hackability</strong> (la bidouillabilité) : tout est
  modifiable (sans pour autant observer une régression des fonctionnalités).
  Nous serons alors capable de construire une application avec nos propres
  <strong>spécificités</strong>, <strong>mécanismes</strong>,
  <strong>outils</strong> et <strong>fonctionnements</strong>.</p>

  <h2 id="Creer_une_application" for="main-toc">Créer une
  application</h2>

  <p>Créer une application revient à clôner le dépôt
  <code>Embryo.git</code> :</p>
  <pre><code class="language-shell">$ mkdir -p ~/Development/MyApp/
$ cd !!$
$ git clone http://git.hoa-project.net/Embryo.git .</code></pre>
  <p>Nous retrouvons l'architecture du dossier <code>Data/</code> que propose
  l'abstraction <code>hoa://</code>, tout comme pour le dossier
  <code>Application/</code>. Nous noterons que Hoa est <strong>absent</strong>
  du framework !</p>
  <p>Nous allons maintenant préciser à l'application où se trouve Hoa et créer
  notre propre script dédié à notre application.</p>

  <h3 id="Ou_est_Hoa" for="main-toc">Où est Hoa ?</h3>

  <p>Dans le dossier <code>Data/Bin/</code>, nous trouvons les scripts
  <code>whereishoa</code> et <code>whereishoa.bat</code>. Attention, si vous
  n'utilisez pas une installation « standard » de PHP, vous devrez retoucher
  la première ligne de <code>whereishoa</code> ou la variable
  <code>PHP</code> de <code>whereishoa.bat</code>.</p>
  <p>Ce script va modifier trois fichiers :</p>
  <ul>
    <li><code>Data/Etc/Configuration/HoaCoreCore.json</code>, fichier de
    configuration externe du noyau ;</li>
    <li><code>Data/Etc/Configuration/.Cache/HoaCoreCore.php</code>, son
    équivalent en cache ;</li>
    <li><code>Data/Core.link.php</code>, un lien vers le noyau de Hoa.</li>
  </ul>
  <p>Le fichier le plus important est bien entendu
  <code>Data/Core.link.php</code>, qui, lorsqu'il est inclu,
  <strong>liera</strong> notre application avec Hoa. Plusieurs avantages
  apparaissent : peu importe où est installé Hoa, notre application va toujours
  inclure <code>Data/Core.link.php</code> et nous n'aurons qu'à relancer
  <code>Data/Bin/whereishoa</code> pour la lier à Hoa ; ce qui implique que
  notre application pourra <strong>choisir</strong> entre plusieurs versions de
  Hoa si plusieurs existent. Enfin l'application peut même choisir
  d'<strong>embarquer</strong> Hoa ou pas, le choix pouvant être laissé à
  l'utilisateur lors de l'installation s'il souhaite utiliser la version
  embarquée de Hoa ou sa propre installation. Bref, nous aurons compris que le
  fichier <code>Data/Core.link.php</code> agit comme un <strong>routeur</strong>
  vers Hoa et que nous n'aurons jamais à modifier notre application si nous
  déplaçons ou modifie Hoa.</p>
  <p>Lors de la création d'une application, tout est configuré pour chercher Hoa
  dans le dossier <code>/usr/local/lib/Hoa/</code> ; ce qui implique que si Hoa
  est présent dans ce dossier, pas besoin de lancer le script, sinon :</p>
  <pre><code class="language-shell">$ Data/Bin/whereishoa
** Where is Hoa **

Ready to redefine the path to Hoa?
We need to redefine it in:
  • the Core.link.php file;
  • the configuration file;
  • the configuration cache file.

There we go [y/n]? y

A very simple question: where is Hoa so?
> ▋</code></pre>
  <p>Si le système et les droits le permettent, le fichier
  <code>Data/Core.link.php</code> sera un <strong>lien symbolique</strong>
  au lieu d'être un fichier PHP comportant une instruction
  <code>require</code> (comportement par défaut).</p>

  <h3 id="Commandes_dediees_a_l-application" for="main-toc">Commandes dédiées à
  l'application</h3>

  <p>Nous avons vu que les scripts <code>hoa</code> et <code>hoa.bat</code> de
  Hoa sont très pratiques. Nous aimerions pouvoir en faire autant pour notre
  application, et qui plus est, avec des commandes personnalisées !  Nous
  remarquons que les scripts <code>myapp</code> et <code>myapp.bat</code> sont
  présents dans le dossier <code>Data/Bin/</code>. Ces scripts
  <strong>étendent</strong> les scripts <code>hoa</code> et <code>hoa.bat</code>
  de Hoa (nous retrouvons donc les mêmes commandes) et sont
  <strong>dédiés</strong> à notre application car ils la connaissent. Pour
  <strong>personnaliser</strong> notre application, il nous suffit de les
  renommer (nous utiliserons <code>myapp</code> dans tous les exemples). Libre à
  nous de placer ces scripts dans le <code>$PATH</code> par la suite.</p>
  <pre><code class="language-shell">$ Data/Bin/myapp
// Homescreen.
$ mv !! !!:s/myapp/gordonsapp
mv Data/Bin/myapp Data/Bin/gordonsapp
$ !!$
Data/Bin/gordonsapp
// Homescreen.</code></pre>
  <p>Pour se persuader de la différence entre <code>hoa</code> (dans Hoa) et
  <code>myapp</code> (dans notre application), il suffit de résoudre le
  chemin <code>hoa://Data/</code>. Le résultat attendu est n'importe où pour
  <code>hoa</code> (comme il ne connaît pas notre application), et le bon
  chemin pour <code>myapp</code> car il connaît notre application ;
  ainsi :</p>
  <pre><code class="language-shell">$ hoa core:resolve hoa://Data
// Somewhere, in a galaxy far, far away…
$ myapp core:resolve hoa://Data
hoa://Data is equivalent to:
~/Development/MyApp/Data/</code></pre>
  <p>Nous verrons plus tard comment écrire des commandes uniquement accessibles
  depuis notre application et pas depuis Hoa, tout comme écrire des
  bibliothèques réservées à notre application et non pas à Hoa (donc à toutes
  nos applications).</p>

  <h2 id="Tester_l-application" for="main-toc">Tester
  l'application</h2>

  <p>L'application contient déjà un dossier <code>Application/Public/</code>
  avec un fichier <code>index.php</code>. Nous allons le tester immédiatement.
  Si aucune erreur n'apparaît, c'est que tout est bien fonctionnel.</p>
  <p>Nous pourrons exécuter notre index de cette manière :</p>
  <pre><code class="language-shell">$ php Application/Public/index.php
Hello you! I'm your first Hoa-based application \o/.</code></pre>
  <p>Toutes mes félicitations ! Vous avez installé Hoa et vous avez créé votre
  première application avec vos propres scripts !</p>

  <ul class="prev_next">
    <li><a href="@learn:chapter=Core"><previous_chapter /> Exploration du
        noyau</a></li>
    <li><a href="@learn:chapter=Routerdispatcher">Router + Dispatcher = ♥
        <next_chapter /></a></li>
  </ul>

</yield>
</definition>
