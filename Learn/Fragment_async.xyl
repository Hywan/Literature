<?xml version="1.0" encoding="utf-8"?>
<?xyl-use href="../Definitions.xyl"?>

<definition xmlns="http://hoa-project.net/xyl/xylophone">
<yield name="chapter">

  <draft />

  <h1 id="Model">Manuel d'apprentissage<title_break />Fragment et asynchrone</h1>

  <ul class="prev_next">
    <li><a href="@ll:chapter=Form"><previous_chapter /> Formulaire</a></li>
    <li>??? <next_chapter/></li>
  </ul>

  <p>Bla bla</p>

  <h2 id="Table_des_matieres">Table des matières</h2>

  <tableofcontents id="main-toc" />

  <h2 id="Fragment" for="main-toc">Fragment</h2>

  <p>Les fragments sont un autre type de document, comme <code>document</code>,
  <code>overlay</code> ou <code>definition</code>. Un fragment représente une
  <strong>portion isolée</strong> d'un document susceptible d'être
  <strong>réutilisée</strong>.</p>

  <h3 id="Declarer_et_utiliser_des_fragments" for="main-toc">Déclarer et
  utiliser des fragments</h3>

  <p>Un document <code>fragment</code> peut contenir <strong>plusieurs</strong>
  fragments, chacun étant contenu dans des composants <code>snippet</code> et
  identifié par un attribut <code>id</code>. Ainsi, nous avons les fragments
  <code>first</code> et <code>second</code> dans
  <code>Some.fragment.xyl</code> :</p>
  <pre><code class="language-markup">&amp;lt;?xml version="1.0" encoding="utf-8"?>

&amp;lt;fragment xmlns="http://hoa-project.net/xyl/xylophone">
  &amp;lt;snippet id="first">
    &amp;lt;p>First one&amp;lt;/p>
  &amp;lt;/snippet>

  &amp;lt;snippet id="second">
    &amp;lt;p>Second one&amp;lt;/p>
  &amp;lt;/snippet>
&amp;lt;/fragment></code></pre>
  <p>Pour pouvoir utiliser un fragment, nous devons utiliser la
  <em lang="en">processing-instruction</em>
  <code>&amp;amp;lt;?xyl-fragment?></code> qui ressemble à ses sœurs, avec
  l'attribut <code>href</code>. Par la suite, pour utiliser un fragment, nous
  allons nous servir du composant <code>yield</code> et de son attribut
  <code>select</code> avec comme sélecteur
  <code>?f[ile]:<em>filename</em>#<em>id</em></code>. Cela signifie que nous
  allons <strong>sélectionner</strong> le <strong>fragment</strong>
  <code><em>id</em></code> dans le <strong>fichier</strong>
  <code><em>filename</em></code>. Voyons plutôt avec <code>Main.xyl</code> :</p>
  <pre><code class="language-markup">&amp;lt;?xml version="1.0" encoding="utf-8"?>
&amp;lt;?xyl-fragment href="Some.fragment.xyl"?>

&amp;lt;document xmlns="http://hoa-project.net/xyl/xylophone">
  &amp;lt;title>Fragments tests&amp;lt;/title>

  &amp;lt;yield select="?f:Some.fragment.xyl#first" />
&amp;lt;/document></code></pre>
  <p>Toutefois, il est inconfortable de toujours devoir préciser le nom du
  fichier, surtout si ce fichier est déplacé ou comporte un nom plus long. C'est
  pourquoi nous pouvons lui préciser un <strong>alias</strong> avec l'attribut
  <code>as</code> dans la <em lang="en">processing-instruction</em>
  <code>&amp;amp;lt;?xyl-fragment?></code>. Cet alias pourra être utilisé à la
  place de <code><em>filename</em></code> dans nos attributs
  <code>select</code>. Ainsi, l'exemple précédent devient :</p>
  <pre data-line="2,7"><code class="language-markup">&amp;lt;?xml version="1.0" encoding="utf-8"?>
&amp;lt;?xyl-fragment href="Some.fragment.xyl" as="some"?>

&amp;lt;document xmlns="http://hoa-project.net/xyl/xylophone">
  &amp;lt;title>Fragments tests&amp;lt;/title>

  &amp;lt;yield select="?f:some#first" />
&amp;lt;/document></code></pre>
  <p>Notons que les aliases doivent être <strong>uniques</strong> au sein du
  même document mais pas entre plusieurs documents.</p>
  <p>Enfin, faire le rendu de <code>Main.xyl</code> est tout ce qu'il y a de
  plus classique et nous pourrons observer le placement du fragment :</p>
  <pre><code class="language-php">$xyl = new Hoa\Xyl\Xyl(
    new Hoa\File\Read('Main.xyl'),
    new Hoa\Http\Response\Response(),
    new Hoa\Xyl\Interpreter\Html\Html()
);
$xyl->render();</code></pre>
  <p>Le fragment apparaît bien à l'endroit où nous le souhaitons.</p>

  <h3 id="Difference_entre_fragments_et_overlays" for="main-toc">Différence
  entre fragments et <em lang="en">overlays</em></h3>

  <p>Un <em lang="en">overlay</em> est utilisé pour être placé
  <strong>intelligemment</strong> et <strong>dynamiquement</strong> dans un
  document, c'est à dire que si le document est modifié, les
  <em lang="en">overlays</em> vont savoir se <strong>replacer</strong> comme il
  faut. Un fragment, quant à lui, est placé <strong>statiquement</strong> dans
  un document et n'a <strong>aucune connaissance</strong> de ce document. Nous
  pouvons parler d'« inclusion verbatim ».</p>
  <p>Sémantiquement parlant, un <em lang="en">overlay</em> représente n'importe
  quoi, souvent des blocs graphiques, alors qu'un fragment représente réellement
  un <strong>fragment graphique</strong>, une partie qui est
  <strong>détachable</strong>. Une bonne manière de voir les fragments est dans
  un contexte asynchrone : une partie du document peut changer, nous pouvons
  <strong>remplacer</strong> un fragment par un autre.</p>
  <p>Notons qu'un fragment peut être utilisé dans un
  <em lang="en">overlay</em>.</p>

  <h3 id="Rendu_isole_d-un_fragment" for="main-toc">Rendu isolé d'un
  fragment</h3>

  <p>Il est intéressant de pouvoir faire le rendu d'un fragment de manière
  <strong>isolée</strong>. Pour cela, nous devons récupérer le fragment en
  question, à l'aide de la méthode <code>Hoa\Xyl\Xyl::getSnippet</code> puis en
  faire son rendu avec la méthode <code>Hoa\Xyl\Xyl::render</code>.</p>
  <p>Cependant, être capable de récupérer un fragment pour en faire son rendu
  nécessite <strong>préalablement</strong> d'interpréter le document, grâce à la
  méthode <code>Hoa\Xyl\Xyl::interprete</code>. Ainsi :</p>
  <pre><code class="language-php">$xyl = new Hoa\Xyl\Xyl(
    new Hoa\File\Read('Some.fragment.xyl'),
    new Hoa\Http\Response\Response(),
    new Hoa\Xyl\Interpreter\Html\Html()
);
// 1. interpretation.
$xyl->interprete();

// 2. get fragment.
$fragment = $xyl->getSnippet('first');

// 3. render.
$xyl->render($fragment);</code></pre>
  <p>C'est tout pour les fragments ! Ça reste un document comme les autres, avec
  le liage des données et tout ce que nous connaissons de XYL.</p>

  <h2 id="Asynchrone" for="main-toc">Asynchrone</h2>

  <p>Lorsqu'un client demande le rendu d'un document, nous (le serveur) le
  traitons en entier puis nous lui servons. Ce dernier a alors fait une première
  requête pour le document qui va engendrer une nouvelle requête pour chaque
  ressource associée. Le client change alors de document ou veut le modifier :
  nous allons à nouveau devoir traiter le document entier, lui servir, et il va
  à nouveau charger toutes les ressources associées. La majorité des données
  échangées sont inutiles, et malgré que certaines ressources ont été détectées
  comme inchangées, des requêtes ont été faites. Nous pouvons parler de
  <strong>construction synchrone</strong> de document. Afin d'économiser des
  ressources, aussi bien côté client que serveur, il serait intéressant
  d'envisager une <strong>construction asynchrone</strong>.</p>
  <p>Une construction asynchrone permet de ne <strong>reconstruire</strong>
  qu'une ou plusieurs parties d'un document. En HTML, nous pouvons nous appuyer
  sur <a href="http://w3.org/TR/XMLHttpRequest/">XHR</a> (pour <em lang="en">XML
  HTTP Request</em>) qui permet de créer des requêtes HTTP depuis Javascript
  afin d'échanger des données sous divers formats (voir la
  <a href="http://w3.org/TR/XMLHttpRequest/#xmlhttprequestresponsetype">liste
  des formats de XHR</a>).</p>
  <p>XYL <strong>propose</strong> un support <strong>natif</strong> de
  l'asynchrone pour certains interpréteurs, mais nous allons rester concentrer
  sur l'interpréteur HTML. XYL fonctionne en deux étapes pour ce support :</p>
  <ol>
    <li>lors de l'interprétation du document : mise en place d'un balisage
    sémantique pour identifier les zones asynchrones ;</li>
    <li>une fois le document chez le client : utilisation d'une bibliothèque
    Javascript exploitant le balisage sémantique pour créer et manipuler les
    requêtes HTTP.</li>
  </ol>
  <p>Ces deux étapes permettent une séparation <strong>claire</strong> des
  préoccupations. Si nous connaissons le balisage sémantique introduit par la
  première étape, nous pouvons utiliser n'importe quelle bibliothèque Javascript
  pour gérer la seconde étape.</p>
  <p>Hoa propose la bibliothèque
  <code>hoa://Library/Xyl/Javascript/Hoa.js</code> pour permettre entre autre de
  jouer ce rôle de seconde étape. C'est cette bibliothèque que nous allons
  utiliser dans nos exemples mais il est tout à fait imagineable d'en utiliser
  d'autres !</p>

  <h3 id="Definir_une_zone_asynchrone" for="main-toc">Définir une zone
  asynchrone</h3>

  <p>XYL propose le composant <code>async</code> pour définir une zone
  asynchrone. Afin d'interagir avec cette zone, il est nécessaire de lui
  définir un identifiant grâce à l'attribut <code>id</code>. Tous les composants
  qui peuvent entraîner une action synchrone (comme <code>a</code> ou
  <code>button</code>) seront modifiés. Par exemple, un lien avec le composant
  <code>a</code> effectuera sa requête de manière asynchrone.</p>
  <p>Très souvent, il est utile de connaître quelle partie du document sera
  impactée par la requête asynchrone. C'est précisément le rôle de l'attribut
  <code>scope</code> du composant <code>async</code>. Nous pouvons cibler une
  partie du document grâce à trois types d'expressions :</p>
  <ul>
    <li><code>?[q[uery]:]<em>expression</em></code> : où
    <code><em>expression</em></code> est un
    <a href="http://w3.org/TR/css3-selectors">sélecteur CSS</a> absolu (<ie />
    sur l'ensemble du document) ;</li>
    <li><code>?r[elative-]q[uery]:<em>expression</em></code> : où
    <code><em>expression</em></code> est un sélecteur CSS relatif au
    composant ;</li>
    <li><code>?x[path]:<em>expression</em></code> : où
    <code><em>expression</em></code> est
    <a href="http://w3.org/TR/xpath20">expression XPath</a>.</li>
  </ul>
  <p>Prenons l'exemple d'une zone de navigation (composant <code>nav</code>)
  dont les liens mettront à jour la partie <code>myArticle</code> (composant
  <code>article</code>). Nous allons entourer ce composant <code>nav</code> d'un
  composant <code>async</code> en lui donnant l'identifiant <code>myAsync</code>
  afin de le manipuler plus tard. De même, nous lui précisons sa cible :
  <code>#myArticle</code> (équivalent à <code>?q:#myArticle</code> ou encore
  <code>?query:#myArticle</code> si nous l'exprimons avec un sélecteur CSS).
  Nous obtenons alors le code suivant :</p>
  <pre><code class="language-markup">&amp;lt;?xml version="1.0" encoding="utf-8"?>

&amp;lt;document xmlns="http://hoa-project.net/xyl/xylophone">
  &amp;lt;title>Async' tests&amp;lt;/title>

  &amp;lt;async id="myAsync" scope="#myArticle">
    &amp;lt;nav>
      &amp;lt;ul>
        &amp;lt;li>&amp;lt;a href="A.php">link A&amp;lt;/a>;&amp;lt;/li>
        &amp;lt;li>&amp;lt;a href="B.php">link B&amp;lt;/a>;&amp;lt;/li>
        &amp;lt;li>&amp;lt;a href="C.php">link C&amp;lt;/a>.&amp;lt;/li>
      &amp;lt;/ul>
    &amp;lt;/nav>
  &amp;lt;/async>

  &amp;lt;article id="myArticle">
    Default
  &amp;lt;/article>

  &amp;lt;script src="hoa://Library/Xyl/Javascript/Hoa.js">&amp;lt;/script>
&amp;lt;/document></code></pre>
  <p>Notre zone asynchrone est prête. Elle est définie et nous savons à quelle
  autre partie du document elle est « liée ».</p>

  <h3 id="Interagir_avec_une_zone_asynchrone" for="main-toc">Interagir avec une
  zone asynchrone</h3>

  <p>Nous allons nous pencher sur
  <code>hoa://Library/Xyl/Javascript/Hoa.js</code>. Cette bibliothèque
  Javascript, à l'instar de Hoa, permet de créer d'autres bibliothèques
  Javascript simplement.</p>
  <p>Le fait de charger cette bibliothèque va activer des mécanismes par défaut
  qui permettent déjà d'utiliser notre zone asynchrone. En effet, si nous
  cliquons sur les liens, nous verrons que leur contenu est chargé dans le
  composant <code>myArticle</code>. Les parties sont bien « liées » entre elles.
  Nous remarquons aussi que l'adresse du document change d'elle-même. Pour cela,
  <code>Hoa.js</code> utilise
  l'<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#the-history-interface">objet
  <code>History</code></a> afin de
  <a href="https://developer.mozilla.org/docs/DOM/Manipulating_the_browser_history">manipuler
  l'historique du navigateur</a>. Si un seul objet est manquant dans tout ce
  processus, <code>Hoa.js</code> rendra la main et nous aurons un comportement
  ordinaire.</p>

  <h4 id="Reproduire_le_comportement_par_defaut" for="main-toc">Reproduire le
  comportement par défaut</h4>

  <p>Nous allons reproduire ce comportement par défaut pour bien comprendre ce
  qu'il se passe et comment interagir avec ces zones.</p>
  <p>Les bibliothèques que propose <code>Hoa.js</code> sont accessibles de deux
  manières :</p>
  <ul>
    <li>depuis l'espace de nom global <code>Hoa</code> en Javascript ;</li>
    <li>depuis l'espace de nom <code>hoa</code> sur les objets du DOM.</li>
  </ul>
  <p>Notre objectif est le suivant : nous allons observer ce qu'il se passe dans
  notre zone asynchrone et réagir en conséquence. Par exemple quand un lien est
  cliqué, une requête asynchrone sera créée. Une fois cette requête terminée
  avec succès, nous récupérerons le résultat et l'associerons à la partie du
  document ciblée par cette zone asynchrone. C'est le comportement le plus
  classique.</p>
  <p>Reprenons notre exemple. Nous allons sélectionner l'élément qui représente
  notre zone asynchrone avec la fonction
  <a href="https://developer.mozilla.org/DOM/document.getElementById"><code>document.getElementById</code></a>.
  Sur cet élément, nous allons accéder à l'espace <code>hoa</code>, puis ensuite
  à l'espace <code>async</code>. Ce dernier propose plusieurs fonctions, dont la
  très classique
  <a href="https://developer.mozilla.org/docs/DOM/element.addEventListener"><code>addEventListener</code></a>.
  Cette fonction permet d'écouter un événement. Les événements sont les même que
  pour
  <a href="http://w3.org/TR/XMLHttpRequest/#xmlhttprequesteventtarget"><code>XMLHttpRequestEventTarget</code></a>
  et
  <a href="http://w3.org/TR/XMLHttpRequest/#xmlhttprequest"><code>XMLHttpRequest</code></a>,
  à savoir :</p>
  <ul>
    <li><code>readystatechange</code>, prend arbitrairement les valeurs
    suivantes (préfixées par <code>STATE_</code> dans notre cas) :
      <ul>
        <li><code>UNSENT</code> : quand l'objet XHR a été créé ;</li>
        <li><code>OPENED</code> : quand la requête a été ouverte (mais que les
            en-têtes n'ont pas encore été envoyées) ;</li>
        <li><code>HEADERS_RECEIVED</code> : quand les en-têtes finales ont été
            reçues ;</li>
        <li><code>LOADING</code> : quand la réponse est en cours de
            chargement ;</li>
        <li><code>DONE</code> : quand le transfert des données est terminé ou
        que quelque chose a mal fonctionné.</li>
      </ul>
    </li>
    <li><code>loadstart</code>, quand la requête démarre ;</li>
    <li><code>progress</code>, pendant que les données sont envoyées et
        chargées ;</li>
    <li><code>abort</code>, quand la requête est interrompue ;</li>
    <li><code>error</code>, quand la requête échoue ;</li>
    <li><code>load</code>, quand la requête est complète et est un
       succès ;</li>
    <li><code>timeout</code>, quand la requête a expiré avant de
        terminer ;</li>
    <li><code>loadend</code>, quand la requête est complète (peu importe si
        elle a été un succès ou un échec) ;</li>
  </ul>
  <p>Nous vous conseillons de lire
  <a href="http://w3.org/TR/XMLHttpRequest/#events">le résumé des événements
  XHR</a> pour plus de détails si vous n'êtes pas familier avec ces
  concepts.</p>
  <p>Notre objectif est donc d'écouter l'événement
  <code>readystatechange</code>. Quand une requête se termine sur un succès
  (représenté par le code HTTP 200), nous remplacerons (à l'aide de
  <a href="https://developer.mozilla.org/DOM/element.innerHTML"><code>innerHTML</code></a>)
  le contenu de la cible de notre zone asynchrone par la réponse de la requête :
  c'est à dire la nouvelle partie de notre document ! Tout ça s'écrit de la
  manière suivante :</p>
  <pre><code class="language-javascript">document.getElementById('myAsync').hoa.async.addEventListener(
    'readystatechange',
    function ( evt, data ) {

        if(   this.STATE_DONE != this.readyState
           ||             200 != this.status)
            return;

        data.scoped[0].innerHTML = this.responseText;

        return;
    }
);</code></pre>
  <p>Essayons notre document. Quand nous cliquons sur les liens, le contenu du
  document change de manière asynchrone : le document n'est jamais rechargé en
  entier. Simple, court et efficace ! Cela ne change pas avec le comportement
  précédent mais le fait d'ajouter notre propre événement engendre la
  désactivation du comportement par défaut.</p>

  <h4 id="Manipuler_plus_precisement_l-historique" for="main-toc">Manipuler plus
  précisément l'historique</h4>

  <p>Tout ce passe comme nous l'espérons mais il existe toutefois un problème
  (avec ou sans le comportement par défaut). Quand nous revenons en arrière dans
  l'historique, les requêtes ne sont pas rejouer. C'est tout à fait normal.
  Rappelons-nous que lorsque nous cliquons sur un lien, l'historique du
  navigateur est modifié et la requête asynchrone est effectué. L'historique est
  géré comme une pile d'états. Quand nous nous déplaçons dans l'historique, des
  états sont dépilés ou empilés.  <code>Hoa.js</code> n'a pas de comportement
  par défaut pour réagir à ces opérations car elles sont trop spécifiques.
  Voyons comment créer un comportement adéquate.</p>
  <p>Notre nouvel objectif est de détecter quand  un état
  est enlevé de l'historique, typiquement quand nous revenons en arrière ou en
  avant. Pour cela, nous allons écouter l'événement
  <code>popstate</code> de la même manière que pour
  <code>readystatechange</code>. À chaque fois que cet événement sera émis, nous
  allons déclencher l'activation de notre zone asynchrone (nous passons sur les
  détails) :</p>
  <pre><code class="language-javascript">var myAsync = document.getElementById('myAsync');
myAsync.hoa.async.addEventListener(
    'popstate',
    function ( evt ) {

        var state = evt.state;
        Hoa.Async.sendForm(
            myAsync,
            'get',
            state.pathname,
            {
                link  : true,
                scoped: myAsync.hoa.async.getScopedElements()
            },
            {'Content-Type': document.contentType || 'text/html'}
        );
    }
);</code></pre>
  <p>Lorsque nous cliquons sur des liens, l'historique change, les requêtes
  asynchrones sont effectuées, et quand nous navigons en arrière et en avant
  dans l'historique, les requêtes asynchrones sont à nouveau effectuées.</p>
  <p>Toutefois, quand nous cliquons plusieurs fois sur le même lien, nous allons
  remplir autant de fois l'historique de ce nouvel état. Il serait plus
  confortable d'éviter ce comportement. Pour cela, nous allons écouter
  l'événement <code>pushstate</code>, représentant l'arrivée d'un nouvel état,
  et si l'adresse du document à charger est la même que l'adresse courante,
  alors nous allons annuler le processus (en mettant la donnée
  <code>data.uri</code> à <code>null</code>). Voyons plutôt :</p>
  <pre><code class="language-javascript">myAsync.hoa.async.addEventListener(
    'pushstate',
    function ( evt, data ) {

        if(window.location.pathname.substr(1) === data.uri)
            data.uri = null;
    }
);</code></pre>
  <p>Et voilà, tout fonctionne bien !</p>

  <h3 id="Formulaires_asynchrones" for="main-toc">Formulaires asynchrones</h3>

  <h2 id="Application_Gordon-s_blog" for="main-toc">Application :
  <em lang="en">Gordon's blog</em></h2>

  <ul class="prev_next">
    <li><a href="@ll:chapter=Form"><previous_chapter /> Formulaire</a></li>
    <li>??? <next_chapter/></li>
  </ul>

</yield>
</definition>
